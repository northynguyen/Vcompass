import { useState, useEffect, useContext, useRef } from 'react';
import 'react-datepicker/dist/react-datepicker.css';
import './HomeFoodService.css';
import FoodServiceCards from './FoodServiceCards';
import LeftSideBar from './LeftSideBar';
import { StoreContext } from '../../Context/StoreContext';
import SkeletonLoading from '../HomeAttractions/SkeletonLoading';

// Danh s√°ch th√†nh ph·ªë
const cities = [
  "H√† N·ªôi",
  "TP H·ªì Ch√≠ Minh",
  "ƒê√† N·∫µng",
  "H·∫£i Ph√≤ng",
  "C·∫ßn Th∆°",
  "An Giang",
  "B√† R·ªãa - V≈©ng T√†u",
  "B·∫Øc Giang",
  "B·∫Øc K·∫°n",
  "B·∫°c Li√™u",
  "B·∫Øc Ninh",
  "B·∫øn Tre",
  "B√¨nh D∆∞∆°ng",
  "B√¨nh ƒê·ªãnh",
  "B√¨nh Ph∆∞·ªõc",
  "B√¨nh Thu·∫≠n",
  "C√† Mau",
  "Cao B·∫±ng",
  "ƒê·∫Øk L·∫Øk",
  "ƒê·∫Øk N√¥ng",
  "ƒêi·ªán Bi√™n",
  "ƒê·ªìng Nai",
  "ƒê·ªìng Th√°p",
  "Gia Lai",
  "H√† Giang",
  "H√† Nam",
  "H√† Tƒ©nh",
  "H·∫£i D∆∞∆°ng",
  "H·∫≠u Giang",
  "H√≤a B√¨nh",
  "H∆∞ng Y√™n",
  "Kh√°nh H√≤a",
  "Ki√™n Giang",
  "Kon Tum",
  "Lai Ch√¢u",
  "L√¢m ƒê·ªìng",
  "L·∫°ng S∆°n",
  "L√†o Cai",
  "Long An",
  "Nam ƒê·ªãnh",
  "Ngh·ªá An",
  "Ninh B√¨nh",
  "Ninh Thu·∫≠n",
  "Ph√∫ Th·ªç",
  "Ph√∫ Y√™n",
  "Qu·∫£ng B√¨nh",
  "Qu·∫£ng Nam",
  "Qu·∫£ng Ng√£i",
  "Qu·∫£ng Ninh",
  "Qu·∫£ng Tr·ªã",
  "S√≥c TrƒÉng",
  "S∆°n La",
  "T√¢y Ninh",
  "Th√°i B√¨nh",
  "Th√°i Nguy√™n",
  "Thanh H√≥a",
  "Th·ª´a Thi√™n Hu·∫ø",
  "Ti·ªÅn Giang",
  "Tr√† Vinh",
  "Tuy√™n Quang",
  "Vƒ©nh Long",
  "Vƒ©nh Ph√∫c",
  "Y√™n B√°i",
];

// ƒê·ªãa ƒëi·ªÉm du l·ªãch n·ªïi ti·∫øng v√† t·ªânh t∆∞∆°ng ·ª©ng
const popularCities = {
  'ƒê√† L·∫°t': 'L√¢m ƒê·ªìng',
  'H·∫° Long': 'Qu·∫£ng Ninh',
  'Long H·∫£i': 'B√† R·ªãa - V≈©ng T√†u',
  'Nha Trang': 'Kh√°nh H√≤a',
  'Phan Thi·∫øt': 'B√¨nh Thu·∫≠n',
  'Hu·∫ø': 'Th·ª´a Thi√™n Hu·∫ø',
  'H·ªôi An': 'Qu·∫£ng Nam',
  'Sapa': 'L√†o Cai',
  'V≈©ng T√†u': 'B√† R·ªãa - V≈©ng T√†u',
  'ƒê·ªìng H·ªõi': 'Qu·∫£ng B√¨nh',
  'Tuy H√≤a': 'Ph√∫ Y√™n',
  'Quy Nh∆°n': 'B√¨nh ƒê·ªãnh',
  'Bu√¥n Ma Thu·ªôt': 'ƒê·∫Øk L·∫Øk',
  'Pleiku': 'Gia Lai',
  'H√† Ti√™n': 'Ki√™n Giang',
  'Ph√∫ Qu·ªëc': 'Ki√™n Giang',
  'M≈©i N√©': 'B√¨nh Thu·∫≠n',
  'B·∫Øc H√†': 'L√†o Cai',
  'M·ªôc Ch√¢u': 'S∆°n La',
  'Mai Ch√¢u': 'H√≤a B√¨nh',
  'Tam ƒê·∫£o': 'Vƒ©nh Ph√∫c',
  'Ninh B√¨nh': 'Ninh B√¨nh',
  'M·ªπ Tho': 'Ti·ªÅn Giang',
  'C·∫ßn Gi·ªù': 'TP H·ªì Ch√≠ Minh',
  'T√¢y Ninh': 'T√¢y Ninh',
  'C√°t B√†': 'H·∫£i Ph√≤ng',
  'S·∫ßm S∆°n': 'Thanh H√≥a',
  'C·ª≠a L√≤': 'Ngh·ªá An',
  'B·∫£o L·ªôc': 'L√¢m ƒê·ªìng',
  'H·ªì Tr√†m': 'B√† R·ªãa - V≈©ng T√†u',
  'Long Kh√°nh': 'ƒê·ªìng Nai',
  'Phan Rang': 'Ninh Thu·∫≠n',
  'Cam Ranh': 'Kh√°nh H√≤a',
  'Qu·∫£ng Ng√£i': 'Qu·∫£ng Ng√£i',
  'Tam K·ª≥': 'Qu·∫£ng Nam',
  'H√† Giang': 'H√† Giang',
  'Cao B·∫±ng': 'Cao B·∫±ng',
  'L·∫°ng S∆°n': 'L·∫°ng S∆°n',
  'M√≥ng C√°i': 'Qu·∫£ng Ninh',
  'U√¥ng B√≠': 'Qu·∫£ng Ninh',
  'C·∫©m Ph·∫£': 'Qu·∫£ng Ninh',
  'Th√°i Nguy√™n': 'Th√°i Nguy√™n',
  'Vi·ªát Tr√¨': 'Ph√∫ Th·ªç',
  'L√†o Cai': 'L√†o Cai'
};

const HomeFoodService = () => {
    const { url } = useContext(StoreContext);
    const [location, setLocation] = useState('');
    const [foodServicesFound, setFoodServicesFound] = useState([]);
    const [page, setPage] = useState(1);
    const [totalPages, setTotalPages] = useState(1);
    const [loading, setLoading] = useState(false);
    const [filters, setFilters] = useState({});
    const [suggestions, setSuggestions] = useState([]);
    const suggestionRef = useRef(null);

    useEffect(() => {
        const handleClickOutside = (event) => {
          if (suggestionRef.current && !suggestionRef.current.contains(event.target)) {
            setSuggestions([]);
          }
        };
        document.addEventListener('mousedown', handleClickOutside);
        return () => {
          document.removeEventListener('mousedown', handleClickOutside);
        };
    }, [suggestionRef]);

    const fetchFoodServices = async (searchLocation = location, pageNum = page, currentFilters = filters) => {
        setLoading(true);
        try {
            const params = new URLSearchParams({
                keyword: searchLocation,
                page: pageNum,
                limit: 6,
                minPrice: currentFilters.priceRange?.min || 0,
                maxPrice: currentFilters.priceRange?.max || 1000000,
                minRating: currentFilters.rating || '',
                amenities: currentFilters.selectedAmenities?.join(',') || '',
                serviceType: currentFilters.serviceType || '',
                status: currentFilters.status || '',
            });

            const response = await fetch(`${url}/api/foodservices/search?${params.toString()}`);
            const data = await response.json();

            if (data.success) {
                setFoodServicesFound(data.data);
                setTotalPages(data.totalPages);
            }
        } catch (error) {
            console.error('L·ªói khi l·∫•y d·ªØ li·ªáu Food Services:', error);
        }
        setLoading(false);
    };

    useEffect(() => {
        fetchFoodServices(location, page, filters);
    }, [page, filters]);

    const handleSearch = () => {
        setPage(1);
        fetchFoodServices(location, 1, filters);
    };

    const handlePageChange = (newPage) => {
        if (newPage >= 1 && newPage <= totalPages) {
            setPage(newPage);
        }
    };

    const handleFilterChange = (newFilters) => {
        setFilters(newFilters);
        setPage(1);
    };

    const handleLocationChange = (e) => {
        const value = e.target.value;
        setLocation(value);
        
        // L·ªçc danh s√°ch g·ª£i √Ω khi ng∆∞·ªùi d√πng nh·∫≠p
        if (value) {
            // L·ªçc c√°c th√†nh ph·ªë th√¥ng th∆∞·ªùng
            const filteredRegular = cities.filter(city =>
                city.toLowerCase().includes(value.toLowerCase())
            );
            
            // L·ªçc c√°c th√†nh ph·ªë/ƒë·ªãa ƒëi·ªÉm du l·ªãch n·ªïi ti·∫øng
            const filteredPopular = Object.keys(popularCities).filter(city =>
                city.toLowerCase().includes(value.toLowerCase())
            ).map(city => `${city}, ${popularCities[city]}`);
            
            // K·∫øt h·ª£p c·∫£ hai k·∫øt qu·∫£
            setSuggestions([...filteredPopular, ...filteredRegular]);
        } else {
            setSuggestions([]);
            // Auto fetch when input is cleared
            setPage(1);
            fetchFoodServices('', 1, filters);
        }
    };

    const handleSuggestionClick = (city) => {
        // Ki·ªÉm tra n·∫øu l√† ƒë·ªãnh d·∫°ng "T√™n th√†nh ph·ªë, T√™n t·ªânh"
        if (city.includes(', ')) {
            const parts = city.split(', ');
            const province = parts[1];
            setLocation(province); // L∆∞u t√™n t·ªânh l√†m gi√° tr·ªã th·ª±c t·∫ø
        } else {
            setLocation(city);
        }
        setSuggestions([]);
        setPage(1);
        fetchFoodServices(city.includes(', ') ? city.split(', ')[1] : city, 1, filters);
    };

    return (
        <div className="home-attractions-container">
            <form className="attractions-search-form" onSubmit={(e) => { e.preventDefault(); handleSearch(); }}>
                <div className="attractions-search-item" ref={suggestionRef} style={{ position: 'relative' }}>
                    <span role="img" aria-label="location">üìç</span>
                    <input
                        type="text"
                        placeholder="Nh·∫≠p ƒë·ªãa ƒëi·ªÉm"
                        className="attractions-input"
                        onChange={handleLocationChange}
                        value={location}
                        autoComplete="off"
                    />
                    {suggestions.length > 0 && (
                        <ul className="suggestions-list">
                            {suggestions.map((city, index) => (
                                <li 
                                    key={index} 
                                    onClick={() => handleSuggestionClick(city)}
                                >
                                    {city}
                                </li>
                            ))}
                        </ul>
                    )}
                </div>
                <button type="submit" className="attractions-search-btn">
                    T√¨m ki·∫øm
                </button>
            </form>

            <div className="attractions-content-container">
                <LeftSideBar onFilterChange={handleFilterChange} />
                {loading ? <SkeletonLoading type= "nh√† h√†ng" /> : <FoodServiceCards foodServicesFound={foodServicesFound} />}
            </div>

            {totalPages > 1 && (
                <div className="pagination">
                    <button disabled={page === 1} onClick={() => handlePageChange(page - 1)}>¬´</button>
                    <span>Trang {page} / {totalPages}</span>
                    <button disabled={page === totalPages} onClick={() => handlePageChange(page + 1)}>¬ª</button>
                </div>
            )}
        </div>
    );
};

export default HomeFoodService;
